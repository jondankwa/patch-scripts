Okay, let's create the Python script for the SSH loop and the corresponding GitLab CI/CD YAML file.

**Assumptions:**

1.  You have SSH key-based authentication set up between the machine running the script (or the GitLab runner) and the target servers. Password authentication is less secure and harder to automate reliably.
2.  The user running the script (or the GitLab runner user) has `sudo` privileges on the target servers to run `yum update` without needing a password for `sudo` itself.
3.  You have Python 3 installed on the machine/runner.
4.  You have the `paramiko` library installed (`pip install paramiko`).

---

**1. Input Server List File (`servers.txt`)**

Create a file named `servers.txt` in the same directory where you'll place the Python script. List one server hostname or IP address per line.

```txt
# servers.txt
server1.example.com
192.168.1.101
server2.yourdomain.local
# Add more servers as needed
```

---

**2. Python Script (`update_servers.py`)**

This script reads `servers.txt`, connects to each server via SSH using a private key, runs `sudo yum update -y`, and logs the output to `update_log.txt`.

```python
#!/usr/bin/env python3

import paramiko
import os
import datetime
import logging

# --- Configuration ---
SERVER_LIST_FILE = 'servers.txt'
OUTPUT_LOG_FILE = 'update_log.txt'
# !!! Important: Use GitLab CI/CD Variables for sensitive data like username and key path in production/CI !!!
SSH_USER = os.environ.get('SSH_USER', 'your_ssh_username') # Default or get from env variable
# Path to your SSH private key. In GitLab CI, this will point to the file created from the CI variable.
SSH_KEY_FILEPATH = os.environ.get('SSH_PRIVATE_KEY_PATH', os.path.expanduser('~/.ssh/id_rsa'))
# --- End Configuration ---

# --- Logging Setup ---
# Clear log file for each run or append (choose one)
# Option 1: Clear log file each time
# if os.path.exists(OUTPUT_LOG_FILE):
#     os.remove(OUTPUT_LOG_FILE)
# Option 2: Append to log file (keeping history) - Recommended for CI
log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
log_handler = logging.FileHandler(OUTPUT_LOG_FILE, mode='a') # 'a' for append
log_handler.setFormatter(log_formatter)

logger = logging.getLogger('server_updater')
logger.setLevel(logging.INFO)
logger.addHandler(log_handler)

# Also log to console
console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)
logger.addHandler(console_handler)
# --- End Logging Setup ---


def read_servers(filename):
    """Reads server hostnames/IPs from a file."""
    servers = []
    try:
        with open(filename, 'r') as f:
            for line in f:
                server = line.strip()
                if server and not server.startswith('#'): # Ignore empty lines and comments
                    servers.append(server)
        logger.info(f"Read {len(servers)} servers from {filename}")
    except FileNotFoundError:
        logger.error(f"Error: Server list file '{filename}' not found.")
    return servers

def run_yum_update(hostname, username, key_filepath):
    """Connects to a server via SSH and runs 'sudo yum update -y'."""
    ssh_client = None # Ensure client is defined for finally block
    try:
        logger.info(f"Connecting to {hostname} as {username}...")
        ssh_client = paramiko.SSHClient()
        # !!! Security Warning: AutoAddPolicy accepts unknown keys.
        # In a production environment, consider using known_hosts or RejectPolicy.
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        # Load the private key
        try:
            private_key = paramiko.RSAKey.from_private_key_file(key_filepath)
            logger.info(f"Using private key: {key_filepath}")
        except paramiko.PasswordRequiredException:
            logger.error(f"Error: Private key file '{key_filepath}' is encrypted and requires a password (not supported).")
            return False, "Private key requires password", ""
        except FileNotFoundError:
             logger.error(f"Error: Private key file '{key_filepath}' not found.")
             return False, f"Private key file '{key_filepath}' not found.", ""
        except Exception as key_err:
             logger.error(f"Error loading private key '{key_filepath}': {key_err}")
             return False, f"Error loading private key: {key_err}", ""

        # Connect
        ssh_client.connect(hostname=hostname, username=username, pkey=private_key, timeout=30)
        logger.info(f"Connected successfully to {hostname}.")

        # --- Execute Command ---
        command = "sudo yum update -y"
        logger.info(f"Executing command on {hostname}: {command}")
        stdin, stdout, stderr = ssh_client.exec_command(command, get_pty=True) # get_pty can help with sudo sometimes

        # Read output (handle potential large outputs carefully if needed)
        stdout_output = stdout.read().decode('utf-8', errors='ignore')
        stderr_output = stderr.read().decode('utf-8', errors='ignore')
        exit_status = stdout.channel.recv_exit_status() # Get command exit status

        logger.info(f"Command finished on {hostname} with exit status {exit_status}")

        # Log command output
        log_message = f"--- Log for {hostname} ({datetime.datetime.now()}) ---\n"
        log_message += f"Exit Status: {exit_status}\n"
        log_message += f"STDOUT:\n{stdout_output}\n"
        log_message += f"STDERR:\n{stderr_output}\n"
        log_message += f"--- End Log for {hostname} ---\n"

        # Write detailed output to the log file only (not console)
        with open(OUTPUT_LOG_FILE, 'a') as f:
            f.write(log_message)

        if exit_status == 0:
             logger.info(f"Successfully updated {hostname}.")
             return True, stdout_output, stderr_output
        else:
             logger.error(f"Command failed on {hostname} (Exit Status: {exit_status}). Check '{OUTPUT_LOG_FILE}' for details.")
             return False, stdout_output, stderr_output

    except paramiko.AuthenticationException:
        logger.error(f"Authentication failed for {username}@{hostname}. Check username and key.")
        return False, "Authentication failed", ""
    except paramiko.SSHException as ssh_ex:
        logger.error(f"SSH connection error for {hostname}: {ssh_ex}")
        return False, f"SSH error: {ssh_ex}", ""
    except TimeoutError:
         logger.error(f"Connection timed out for {hostname}.")
         return False, "Connection timed out", ""
    except Exception as e:
        logger.error(f"An unexpected error occurred for {hostname}: {e}")
        return False, f"Unexpected error: {e}", ""
    finally:
        if ssh_client:
            ssh_client.close()
            logger.info(f"Connection closed for {hostname}.")


if __name__ == "__main__":
    start_time = datetime.datetime.now()
    logger.info(f"--- Starting Server Update Script at {start_time.strftime('%Y-%m-%d %H:%M:%S')} ---")

    if not os.path.exists(SSH_KEY_FILEPATH):
         logger.error(f"Critical Error: SSH private key file not found at '{SSH_KEY_FILEPATH}'. Please check the path or the SSH_PRIVATE_KEY_PATH environment variable.")
         exit(1) # Exit if key is missing

    servers_to_update = read_servers(SERVER_LIST_FILE)
    success_count = 0
    failure_count = 0

    if not servers_to_update:
        logger.warning("No servers found in the list file. Exiting.")
        exit(0)

    for server in servers_to_update:
        logger.info(f"--- Processing server: {server} ---")
        success, _, _ = run_yum_update(server, SSH_USER, SSH_KEY_FILEPATH)
        if success:
            success_count += 1
        else:
            failure_count += 1
        logger.info(f"--- Finished processing server: {server} ---")


    end_time = datetime.datetime.now()
    duration = end_time - start_time
    logger.info(f"--- Server Update Script Finished at {end_time.strftime('%Y-%m-%d %H:%M:%S')} ---")
    logger.info(f"Duration: {duration}")
    logger.info(f"Summary: {success_count} servers updated successfully, {failure_count} servers failed.")
    if failure_count > 0:
        logger.warning(f"There were {failure_count} failures. Please check '{OUTPUT_LOG_FILE}' for details.")
        # Optionally exit with non-zero status for CI pipeline failure
        # exit(1)
```

---

**3. GitLab CI/CD Configuration (`.gitlab-ci.yml`)**

This file tells the GitLab runner how to execute the update script.

```yaml
# .gitlab-ci.yml

# Define stages for the pipeline
stages:
  - update

# Define the job
yum_update_servers:
  stage: update
  image: python:3.9 # Use a Python image that includes basic shell tools

  # Define variables needed by the script
  # It's BEST PRACTICE to set SSH_USER and especially SSH_PRIVATE_KEY
  # in GitLab's CI/CD Variables settings (Settings -> CI/CD -> Variables).
  # Mark SSH_PRIVATE_KEY as 'Protected' and 'Masked' and set 'Type' to 'File'.
  variables:
    SSH_USER: "your_default_ssh_user"  # Override in GitLab Variables if needed
    # The GitLab runner will create a file at the path specified by the SSH_PRIVATE_KEY variable
    # when its type is set to 'File' in GitLab CI/CD settings.
    # The script reads this path from the SSH_PRIVATE_KEY_PATH env var.
    SSH_PRIVATE_KEY_PATH: ${SSH_PRIVATE_KEY} # GitLab injects the path here when type is 'File'
    SERVER_LIST_FILE_PATH: "servers.txt" # Path to server list within the repo
    OUTPUT_LOG_FILE_PATH: "update_log.txt" # Path for the output log

  before_script:
    # Install necessary dependencies
    - pip install paramiko
    # Ensure the private key file provided by GitLab Runner has the correct permissions
    # The variable SSH_PRIVATE_KEY (type: File) provides the path in SSH_PRIVATE_KEY_PATH
    - echo "Setting permissions for SSH key at $SSH_PRIVATE_KEY_PATH"
    - chmod 600 "$SSH_PRIVATE_KEY_PATH"
    # Optional: Install ssh-agent if needed for more complex scenarios or key types
    # - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    # - eval $(ssh-agent -s)
    # - ssh-add "$SSH_PRIVATE_KEY_PATH"

  script:
    # Run the Python script
    # Pass necessary info via environment variables (already done via 'variables' section)
    - echo "Starting yum update process..."
    - python update_servers.py

  # Define artifacts to keep after the job finishes
  artifacts:
    paths:
      - ${OUTPUT_LOG_FILE_PATH} # Keep the log file
    when: always # Keep artifacts even if the job fails, so you can see logs

  # Control when the job runs (example: only manually)
  # Remove or change 'when: manual' to trigger automatically (e.g., on pushes to main)
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Or your specific branch like 'main'
      when: manual # Make it a manual trigger for safety
      allow_failure: false # Fail the pipeline if this job fails

  # Optional: Use tags if you need specific runners (e.g., runners with network access to your servers)
  # tags:
  #   - specific-runner-tag
```

---

**Explanation and Setup:**

1.  **Create Files:** Place `servers.txt`, `update_servers.py`, and `.gitlab-ci.yml` in the root of your GitLab repository.
2.  **SSH Key:**
    * Generate an SSH key pair specifically for this automation if you don't have one (`ssh-keygen -t rsa -b 4096 -f gitlab_ci_key`). **Do not use a password/passphrase for the key.**
    * Add the public key (`gitlab_ci_key.pub`) to the `~/.ssh/authorized_keys` file on **all** target servers listed in `servers.txt` for the user specified by `SSH_USER`.
    * Copy the **entire content** of the private key file (`gitlab_ci_key`).
3.  **GitLab CI/CD Variables:**
    * Go to your GitLab Project -> Settings -> CI/CD -> Variables.
    * Click "Add variable".
    * **Key:** `SSH_PRIVATE_KEY`
    * **Value:** Paste the content of your private key here.
    * **Type:** Select `File`.
    * **Flags:** Check `Protect variable` (if the job runs on protected branches/tags) and **definitely check `Mask variable`** to hide it in job logs.
    * Click "Add variable".
    * Add another variable (optional but good practice):
    * **Key:** `SSH_USER`
    * **Value:** The username the script should use to SSH into the servers (e.g., `devops`, `admin`).
    * **Flags:** Check `Protect variable` if needed.
4.  **GitLab Runner:** Ensure you have a GitLab Runner configured for your project that:
    * Can run Docker images (like `python:3.9`).
    * Has network access to reach the servers listed in `servers.txt` via SSH (port 22 usually). Check firewalls.
    * If using specific runners, make sure the `tags` in `.gitlab-ci.yml` match the runner's tags.
5.  **Commit and Push:** Commit `servers.txt`, `update_servers.py`, and `.gitlab-ci.yml` to your repository and push.
6.  **Run the Pipeline:**
    * Go to your GitLab Project -> CI/CD -> Pipelines.
    * If you used `when: manual`, you should see the `yum_update_servers` job with a play button. Click it to run the job.
    * If you configured it to run automatically (e.g., on push to `main`), the pipeline should start automatically.
7.  **Check Output:** Once the job completes, you can view the job log in GitLab. You can also download the `update_log.txt` file from the job artifacts to see the detailed output of the `yum update` commands for each server.
